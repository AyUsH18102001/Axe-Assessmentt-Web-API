// <auto-generated />
using System;
using AxeAssessmentToolWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AxeAssessmentToolWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230523053132_user_questionAttempted3")]
    partial class user_questionAttempted3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<DateTime?>("D_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("D_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("I_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("I_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsSQL")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("QuestionImage")
                        .HasMaxLength(700)
                        .HasColumnType("NVARCHAR");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("U_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("U_Id")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionContent")
                        .IsUnique();

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTypeId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Rules", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleId"));

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleDisplay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.SQL_Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("SQL_Answer");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.SQL_Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("SQL_Question");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("MCQ_Count")
                        .HasColumnType("int");

                    b.Property<int>("SQL_Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestCreator")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.TestQuestions", b =>
                {
                    b.Property<int>("TestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestQuestionId"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("TestQuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.TestRules", b =>
                {
                    b.Property<int>("TestRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestRulesId"));

                    b.Property<int>("Rule")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("TestRulesId");

                    b.HasIndex("TestId");

                    b.ToTable("TestRules");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.TestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeId"));

                    b.Property<string>("Test")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TestTypeId");

                    b.ToTable("TestType");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("College")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("SelectionStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserProfileImage")
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("UserResumeFileName")
                        .HasColumnType("nvarchar(650)");

                    b.Property<string>("UserToken")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(60)");

                    b.Property<bool?>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("violation")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.UserTest", b =>
                {
                    b.Property<int>("UserTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTestId"));

                    b.Property<int>("Attempted")
                        .HasColumnType("int");

                    b.Property<bool>("EndTest")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTestId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserTests");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.User_QuestionAttempted", b =>
                {
                    b.Property<int>("QuestionAttemptedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionAttemptedId"));

                    b.Property<int?>("OptionIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SqlQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SqlResult")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuestionAttemptedId");

                    b.HasIndex("UserId");

                    b.ToTable("User_QuestionAttempted");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Option", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Question", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.QuestionType", "QuestionType")
                        .WithMany("Question")
                        .HasForeignKey("QuestionTypeId");

                    b.HasOne("AxeAssessmentToolWebAPI.Models.TestType", "TestType")
                        .WithMany("Questions")
                        .HasForeignKey("TestTypeId");

                    b.Navigation("QuestionType");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.SQL_Answer", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.SQL_Question", "SQL_Question")
                        .WithOne("SQL_Answer")
                        .HasForeignKey("AxeAssessmentToolWebAPI.Models.SQL_Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SQL_Question");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.TestQuestions", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.TestRules", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.Test", "Test")
                        .WithMany("TestRules")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.UserTest", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.User", "User")
                        .WithOne("UserTest")
                        .HasForeignKey("AxeAssessmentToolWebAPI.Models.UserTest", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.User_QuestionAttempted", b =>
                {
                    b.HasOne("AxeAssessmentToolWebAPI.Models.User", "User")
                        .WithMany("QuestionAttempted")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.QuestionType", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.SQL_Question", b =>
                {
                    b.Navigation("SQL_Answer")
                        .IsRequired();
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.Test", b =>
                {
                    b.Navigation("TestQuestions");

                    b.Navigation("TestRules");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.TestType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AxeAssessmentToolWebAPI.Models.User", b =>
                {
                    b.Navigation("QuestionAttempted");

                    b.Navigation("UserTest")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
